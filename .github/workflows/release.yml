name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install commitizen build twine pre-commit ruff mypy

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install pre-commit hooks
        run: |
          pre-commit install

      - name: Check branch protection status
        id: branch-protection
        run: |
          # Check if we can push directly to main
          if git push --dry-run origin main 2>/dev/null; then
            echo "can_push_directly=true" >> $GITHUB_OUTPUT
            echo "Branch allows direct push"
          else
            echo "can_push_directly=false" >> $GITHUB_OUTPUT
            echo "Branch is protected, will need special handling"
          fi

      - name: Bump version automatically
        id: bump-version
        run: |
          # Check if we need to bump version based on conventional commits
          if cz bump --dry-run 2>/dev/null; then
            echo "bump_needed=true" >> $GITHUB_OUTPUT

            # Get the new version that would be created
            NEW_VERSION=$(cz bump --dry-run | grep "bump: version" | sed 's/.*â†’ //')
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

            # Update pyproject.toml version configuration before bumping
            sed -i.bak "s/version = \"[^\"]*\"/version = \"$NEW_VERSION\"/" pyproject.toml
            rm -f pyproject.toml.bak

            # Now run cz bump which will create a single commit with all changes
            cz bump --yes

            # Generate changelog content for release (without creating file)
            CHANGELOG_CONTENT=$(cz changelog --dry-run)
            echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            # Push based on branch protection status
            if [ "${{ steps.branch-protection.outputs.can_push_directly }}" = "true" ]; then
              echo "Pushing directly to main branch..."
              git push origin main --follow-tags
            else
              echo "Branch is protected, using alternative push strategy..."
              # Try with different authentication methods
              git push origin main --follow-tags || {
                echo "Standard push failed, trying with force-with-lease..."
                git push origin main --follow-tags --force-with-lease || {
                  echo "All push attempts failed. This might be due to branch protection rules."
                  echo "Please check repository settings or use a Personal Access Token (PAT_TOKEN)."
                  echo "You can also temporarily disable branch protection for releases."
                  exit 1
                }
              }
            fi
          else
            echo "bump_needed=false" >> $GITHUB_OUTPUT
            echo "No version bump needed based on commit messages"
          fi

      - name: Display changelog content
        if: steps.bump-version.outputs.bump_needed == 'true'
        run: |
          echo "Generated changelog content:"
          echo "${{ steps.bump-version.outputs.changelog_content }}"

      - name: Get version
        id: version
        run: |
          VERSION=$(python -c "import markdown_flow; print(markdown_flow.__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check-tag
        run: |
          if git tag -l "${{ steps.version.outputs.tag }}" | grep -q .; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build package
        if: steps.bump-version.outputs.bump_needed == 'true' || steps.check-tag.outputs.exists == 'false'
        run: |
          python -m build

      - name: Publish to PyPI
        if: steps.bump-version.outputs.bump_needed == 'true' || steps.check-tag.outputs.exists == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          skip-existing: true

      - name: Create GitHub Release
        if: steps.bump-version.outputs.bump_needed == 'true' || steps.check-tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: |
            ${{ steps.bump-version.outputs.changelog_content }}

            ## Installation
            ```bash
            pip install markdown-flow==${{ steps.version.outputs.version }}
            ```

            ## What's Changed
            This release includes the following changes:
            - Automated version management with Commitizen
            - Enhanced GitHub Actions workflow for releases
            - Improved branch protection handling
            - Streamlined changelog generation
          files: |
            dist/*
          draft: false
          prerelease: false
