[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "markdown-flow"
dynamic = ["version"]
description = "An agent library designed to parse and process MarkdownFlow documents"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = []

[project.urls]
"Homepage" = "https://github.com/ai-shifu/markdown-flow-agent-py"
"Bug Tracker" = "https://github.com/ai-shifu/markdown-flow-agent-py/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["markdown_flow*"]
exclude = ["tests*"]

[tool.setuptools.dynamic]
version = {attr = "markdown_flow.__version__"}

# =============================================================================
# Ruff configuration - Modern Python linter and formatter
# =============================================================================
[tool.ruff]
# Same as Black and previous Flake8 configuration
line-length = 200
target-version = "py310"

# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default
# Plus additional useful rule categories
lint.select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort (import sorting)
    "N",    # pep8-naming
    "UP",   # pyupgrade (automatic syntax upgrades)
    "B",    # flake8-bugbear (common bugs)
    "C4",   # flake8-comprehensions
    "PIE",  # flake8-pie
    "SIM",  # flake8-simplify
    "RET",  # flake8-return
]

# Ignore specific rules to match previous Flake8 configuration
lint.ignore = [
    "E501",   # Line too long (handled by formatter)
    "F403",   # Star imports (commonly used in __init__.py)
    "E203",   # Whitespace before ':' (Black compatibility)
    "RET503", # Missing explicit return (sometimes makes code less readable)
    "SIM108", # Use ternary operator (can reduce readability in complex cases)
    "C414",   # Unnecessary list() call within sorted() (minor performance issue)
    "SIM102", # Use single if statement (sometimes separate ifs are clearer)
    "B904",   # Exception handling without from clause (contextual decision)
]

# Exclude directories and files
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "*.egg-info",
    "build",
    "dist",
    ".tox",
]

# Allow fixes for all enabled rules
lint.fixable = ["ALL"]
lint.unfixable = []

[tool.ruff.lint.per-file-ignores]
# Allow star imports in __init__.py files
"__init__.py" = ["F401", "F403"]
# Allow print statements and unused variables in example scripts
"examples/*.py" = ["T201", "F841"]

[tool.ruff.lint.isort]
# Configure import sorting to match project conventions
known-first-party = ["markdown_flow"]
force-single-line = false
lines-after-imports = 2

# =============================================================================
# MyPy configuration - Static type checking
# =============================================================================
[tool.mypy]
# Basic settings
python_version = "3.10"
strict = false
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = false

# Import handling
ignore_missing_imports = true
follow_imports = "silent"

# Output
show_error_codes = true
show_column_numbers = true
pretty = true

# Exclude patterns
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "venv/",
    "*.egg-info/",
]

# Per-module options
[[tool.mypy.overrides]]
# Allow more flexibility in test files and examples
module = ["tests.*", "examples.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

# =============================================================================
# Commitizen configuration - Automated versioning and changelog
# =============================================================================
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.5"
tag_format = "v$major.$minor.$patch"
update_changelog_on_bump = true
annotated_tag = true
gpg_sign = false
version_files = [
    "markdown_flow/__init__.py:__version__"
]
bump_message = "bump: version $current_version â†’ $new_version"
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]
